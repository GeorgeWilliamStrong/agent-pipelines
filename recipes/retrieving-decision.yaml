version: v1beta
variable:
  instruction:
    title: Instruction
    description: Specific instruction from executing agent
    format: string
  chat-history:
    title: Chat History
    description: User's chat history
    format: string
  user-query:
    title: User Query
    description: User's follow-up query
    format: string
  ## I find state-context is a bit redundant with instruction
  #state-context:
  #  title: State Context
  #  description: State passed from executing agent
  #  format: string
  file-summary:
    title: File Summary
    description: Summary of the markdown file contents
    format: string
  ## Needs to be added once supported in Artifact BE
  #file-name:
  #  title: File Name
  #  description: File name for retrieval metadata filter 
  #  format: string
  catalog-name:
    title: Catalog Name
    description: Name of the catalog/KB representing the file (assuming 1 file per KB)
    format: string
  namespace:
    title: Namespace
    description: Namespace where catalog/KB exists
    format: string
component:
  get-file-metadata:
    type: instill-artifact
    task: TASK_GET_FILES_METADATA
    input:
      namespace: ${variable.namespace}
      catalog-id: ${variable.catalog-name}
  get-chunks-metadata:
    type: instill-artifact
    task: TASK_GET_CHUNKS_METADATA
    input:
      namespace: ${variable.namespace}
      catalog-id: ${variable.catalog-name}
      file-uid: ${get-file-metadata.output.files[0].file-uid}
  num-chunks:
    type: json
    task: TASK_JQ
    input:
      json-value: ${get-chunks-metadata.output.chunks}
      jq-filter: length
  decide-retrieval-method:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o-mini
      n: 1
      prompt: |-
        Based on the provided instruction, reasoning framework, and additional context from the user, use the provided decision-making criteria to determine whether to:
        1. Use Retrieval-Augmented Generation (RAG) for a more efficient, fact-based search of the document.
        2. Perform a deep analysis of the document for broader understanding or more nuanced insights.
        3. Refuse if neither RAG nor deep analysis can help address the instruction and/or user query, or if the answer is trivial.

        **Instruction:**
        ```
        ${variable.instruction}
        ```

        **User Follow-up Query:**
        ```
        ${variable.user-query}
        ```

        **User Past Conversation History:**
        ```
        ${variable.chat-history}
        ```

        Consider the following when making your decision:
        - Does the instruction ask for **specific, factual answers** (e.g., who, what, when, where)?
        - Is the instruction more focused on **general analysis** (e.g., identifying risks, summarizing overall sentiment, or identifying patterns)?
        - Is there a **risk of missing critical information** if you use RAG, making a deep dive into the entire document more necessary?
        - Does the **user's follow-up query** indicate a need for more detailed exploration or refinement of previous responses?
        - Is there any **relevant context in the chat history** that could alter the approach to the instruction?

        After evaluating these factors, choose the appropriate method for processing the document. Provide reasoning for your choice.
      response-format:
        json-schema: |
          {
              "name": "agentDecision",
              "description": "Decision to use RAG or deep analysis for file analysis.",
              "strict": true,
              "schema": {
                  "type": "object",
                  "properties": {
                      "decision": {
                          "type": "string",
                          "enum": ["rag", "deepAnalysis", "refusal"],
                          "description": "The decision to use RAG, deep analysis or refusal."
                      },
                      "reasoning": {
                          "type": "string",
                          "description": "Reasoning behind the decision to use RAG or deep analysis."
                      }
                  },
                  "required": [
                      "decision",
                      "reasoning"
                  ],
                  "additionalProperties": false
              }
          }
        type: json_schema
      system-message: |-
        You are an AI assistant tasked with deciding whether to use Retrieval-Augmented Generation (RAG), perform a deep analysis of the entire contents of a file, or refuse if neither option can help address the instruction.
        To make your decision, consider the following reasoning process:

        1. **Instruction Type**: Evaluate the specific instruction. If the instruction asks for **factual answers** (e.g., specific details, direct answers, or clear definitions) from the document, RAG should be prioritized because it is more effective for **searchable, factual** queries that focus on specific, well-defined information.
        2. **Analysis Complexity**: If the instruction requires **general or vague analysis** (e.g., "What are the risks?", "What is the overall sentiment?", or "What are the patterns?"), deep analysis should be favored. In these cases, perform a **comprehensive examination** of the document to extract insights across the entire text.
        3. **Risk of Missing Critical Information**: If the instruction involves a **complex query** where missing key information could significantly affect the output quality or decision-making, deep analysis should be chosen. This is especially important when **subtle or nuanced details** matter and cannot be captured through RAG retrieval alone.
        4. **User Follow-Up Query**: Consider if the **user's follow-up query** indicates a need for additional details or clarification that can only be answered by diving deeper into the document. If the user's question builds upon prior context, ensure the response aligns with that prior information.
        5. **User Chat History Context**: Assess if there is any **relevant context in the chat history** that may influence how the instruction should be addressed. If the instruction is related to previous discussions, this context can help refine your decision.
        6. **Refusal**: Consider whether neither RAG nor deep analysis will help address the instruction. If the question is trivial or impossible to answer through either method, refuse the task.

        After evaluating these factors, use your reasoning to either:
        - **Proceed with RAG** if the instruction clearly benefits from retrieval-based responses, focusing on specific, factual information.
        - **Perform deep analysis** if the task requires broader understanding, context extraction, or nuanced reasoning across the entire document.
        - **Refuse** if neither RAG nor deep analysis will help address the instruction.

        Proceed with your decision-making process now.
      temperature: 0
      top-p: 0.95
  decision-to-json:
    type: json
    task: TASK_UNMARSHAL
    input:
      string: ${decide-retrieval-method.output.texts[0]}
  append-num-chunks:
    type: collection
    task: TASK_APPEND
    input:
      data: ${decision-to-json.output.json}
      value:
        numChunks: ${num-chunks.output.results[0]}
  update-decision:
    type: json
    task: TASK_JQ
    input:
      json-value: ${append-num-chunks.output.data}
      jq-filter: if .numChunks <= 15 and .decision == "deepAnalysis" then .decision = "rag" | .reasoning = "RAG retrieval used as the total number of chunks is below the top-k threshold." else . end
  define-criteria:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      n: 1
      prompt: |-
        Based on the provided input instructions and file summary, identify or define criteria for extracting structured information from the file contents.

        If the instruction or user follow-up query contains clearly specified criteria, simply use the criteria as is.

        **Instruction:**
        ```
        ${variable.instruction}
        ```

        **File Summary:**
        ```
        ${variable.file-summary}
        ```

        **User Follow-up Query:**
        ```
        ${variable.user-query}
        ```

        **User Past Conversation History:**
        ```
        ${variable.chat-history}
        ```

        **Output requirements**:
        1. The criteria must address the objectives in the instruction and align with the file summary, user follow-up query and conversation history.
        2. Use as few or as many criteria as are necessary to fully meet the objectives, with a default limit of 10 criteria unless more are explicitly specified by the user.
        3. Ensure each criterion is clearly named and accompanied by a concise and relevant description.
        4. Avoid unnecessary or overly complex criteria that do not align with the input objectives.

        Your response should provide clear, relevant criteria to guide structured information extraction, considering both the input instructions and the file summary.
      response-format:
        type: text
      system-message: |-
        You are a detail-oriented assistant specializing in defining criteria for extracting structured information.
        Your role is to interpret user-provided instructions and the file summary to generate clear, concise, and relevant criteria that align with the user's objectives.
        Follow these principles:

        1. Understand the Instruction: Analyze the instruction, user follow-up query and user past conversation history thoroughly to identify the key objectives and required information.
        2. Incorporate the File Summary: Use the file summary to provide context and ensure criteria are aligned with the content of the file.
        3. Limit Scope Appropriately:
          - Use only the number of criteria necessary to address the input objectives effectively.
          - By default, limit to 10 criteria, unless the user explicitly specifies more (up to 15 or more).
        4. Ensure Simplicity and Relevance: Keep criteria focused, meaningful, and directly tied to the objectives. Avoid unnecessary complexity or irrelevant suggestions.
        5. Define Data Types: Indicate whether each criterion should be reported as a "string" or an "array of strings."
        6. Clear Naming and Descriptions: Provide each criterion with a clear name and a concise description to ensure usability and understanding.

        Your output should effectively guide users in extracting structured information while adhering to these principles and maintaining alignment with the instruction, user follow-up query and file summary.
      
      temperature: 0
      top-p: 0.95
    condition: ${update-decision.output.results[0].decision} == "deepAnalysis"
  schema-generation:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      n: 1
      prompt: |-
        Generate a structured JSON schema based on the following criteria:
        
        **Criteria**:
        ```
        ${define-criteria.output.texts[0]}
        ```

        **Output Requirements**:
        - Extract property names and descriptions from the criteria.
        - Use the example JSON schema format as a strict guide.
        - For each property:
          1. Use "string", or "array" of type "string" as the data type.
          2. Add a clear and concise description.
        - List all property names in the required array.
        - Set additionalProperties to false to disallow unspecified properties.
        - Ensure the output is not enclosed in a code block (```).

        **Example Format**:
        {
            "name": "output_schema",
            "description": "<insert description>",
            "strict": true,
            "schema": {
                "type": "object",
                "properties": {
                    "<criteria_name_1>": {
                        "type": "string",
                        "description": "<description>"
                    },
                    "<criteria_name_2>": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "<description>"
                    }
                },
                "required": [
                    "<criteria_name_1>",
                    "<criteria_name_2>"
                ],
                "additionalProperties": false
            }
        }
      response-format:
        type: text
      system-message: |-
        You are a highly skilled assistant specializing in generating precise and structured JSON schemas.
        Your goal is to help users create schemas that align with OpenAI's structured output feature.
        Follow the user's instructions carefully and adhere to the following steps when generating the output:

        1. **Interpret the Criteria**: Extract key property names and descriptions from the provided input criteria.
        2. **Apply the Example Format**: Use the specified example JSON schema structure as a template for your output. Ensure consistency in style and organization.
        3. **Define Properties**: Each property must:
          - Have a type of "string" or "array" of "string" (as per the <criteria_name_2> example property in the provided example format).
          - Include a clear and concise description based on the input criteria.
        4. **Set Required Properties**: Include all property names in the required list.
        5. **Restrict Additional Properties**: Set additionalProperties to false to ensure only specified properties are allowed.
        6. **Avoid Code Blocks**: Output the JSON schema directly as plain text without enclosing it in code blocks (e.g., ```).

        Follow these steps sequentially to ensure the generated schema meets the input requirements with high accuracy and clarity.
      temperature: 0
      top-p: 0.95
    condition: ${update-decision.output.results[0].decision} == "deepAnalysis"
  schema-to-json:
    type: json
    task: TASK_UNMARSHAL
    input:
      string: ${schema-generation.output.texts[0]}
    condition: ${update-decision.output.results[0].decision} == "deepAnalysis"
  generate-retrieval-queries:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o-mini
      n: 1
      prompt: |-
        Generate 3 different queries to use for semantic search and retrieval of relevant information to address the instruction.
        Use the instruction alongside the file summary, user follow-up query and user past conversation history to generate the queries.
        The 3 generated queries should be sufficiently different to one another so that they each retrieve unique non-redundant chunks.
        The queries must be relevant to the instruction, user follow-up query and user past conversation history.

        **Instruction:**
        ```
        ${variable.instruction}
        ```

        **File Summary:**
        ```
        ${variable.file-summary}
        ```

        **User Follow-up Query:**
        ```
        ${variable.user-query}
        ```

        **User Past Conversation History:**
        ```
        ${variable.chat-history}
        ```
      response-format:
        json-schema: |
          {
              "name": "searchQueries",
              "description": "Queries to use for vector semantic search and retrieval.",
              "strict": true,
              "schema": {
                  "type": "object",
                  "properties": {
                      "queries": {
                          "type": "array",
                          "items": {
                              "type": "string"
                          },
                          "description": "Three generated queries to use for semantic search and retrieval."
                      }
                  },
                  "required": [
                      "queries"
                  ],
                  "additionalProperties": false
              }
          }
        type: json_schema
      system-message: You are a smart and helpful prompt engineer and expert at generating relevant queries for vector database search.
      temperature: 0
      top-p: 0.95
    condition: ${update-decision.output.results[0].decision} == "rag"
  queries-to-json:
    type: json
    task: TASK_UNMARSHAL
    input:
      string: ${generate-retrieval-queries.output.texts[0]}
    condition: ${update-decision.output.results[0].decision} == "rag"
output:
  decision:
    title: Decision
    description: Which retrieval method has been selected.
    value: ${update-decision.output.results[0]}
  extraction-schema:
    title: Extraction Schema
    description: The schema for high-recall data extraction. Only returned if deep analysis method is selected.
    value: ${schema-to-json.output.json}
  rag-queries:
    title: RAG Queries
    description: The three generated queries to perform semantic vector search. Only returned if RAG retrieval method is selected.
    value: ${queries-to-json.output.json.queries}