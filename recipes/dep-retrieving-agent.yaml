version: v1beta
variable:
  instruction:
    title: Instruction
    description: Specific instruction from executing agent
    format: string
  chat-history:
    title: Chat History
    description: User's chat history
    format: string
  user-query:
    title: User Query
    description: User's follow-up query
    format: string
  ## I find state-context is a bit redundant with instruction
  #state-context:
  #  title: State Context
  #  description: State passed from executing agent
  #  format: string
  file-summary:
    title: File Summary
    description: Summary of the markdown file contents
    format: string
  ## Needs to be added once supported in Artifact BE
  #file-name:
  #  title: File Name
  #  description: File name for retrieval metadata filter 
  #  format: string
  retrieval-decision:
    title: Retrieval Decision
    description: Retrieval process to use (can be either "rag" or "deepAnalysis")
    format: string
  catalog-name:
    title: Catalog Name
    description: Name of the catalog/KB representing the file (assuming 1 file per KB)
    format: string
  namespace:
    title: Namespace
    description: Namespace where catalog/KB exists
    format: string
component:
  get-file-metadata:
    type: instill-artifact
    task: TASK_GET_FILES_METADATA
    input:
      namespace: ${variable.namespace}
      catalog-id: ${variable.catalog-name}
  get-chunks-metadata:
    type: instill-artifact
    task: TASK_GET_CHUNKS_METADATA
    input:
      namespace: ${variable.namespace}
      catalog-id: ${variable.catalog-name}
      file-uid: ${get-file-metadata.output.files[0].file-uid}
  num-chunks:
    type: json
    task: TASK_JQ
    input:
      json-value: ${get-chunks-metadata.output.chunks}
      jq-filter: length
  decision:
    type: collection
    task: TASK_ASSIGN
    input:
      data: null
      path: "decision"
      value: ${variable.retrieval-decision}
  append-num-chunks:
    type: collection
    task: TASK_APPEND
    input:
      data: ${decision.output.data}
      value:
        numChunks: ${num-chunks.output.results[0]}
  update-decision:
    type: json
    task: TASK_JQ
    input:
      json-value: ${append-num-chunks.output.data}
      jq-filter: if .numChunks <= 15 and .decision == "deepAnalysis" then .decision = "rag" else . end
  define-criteria:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      n: 1
      prompt: |-
        Based on the provided input instructions and file summary, identify or define criteria for extracting structured information from the file contents.

        If the instruction or user follow-up query contains clearly specified criteria, simply use the criteria as is.

        **Instruction:**
        ```
        ${variable.instruction}
        ```

        **File Summary:**
        ```
        ${variable.file-summary}
        ```

        **User Follow-up Query:**
        ```
        ${variable.user-query}
        ```

        **User Past Conversation History:**
        ```
        ${variable.chat-history}
        ```

        **Output requirements**:
        1. The criteria must address the objectives in the instruction and align with the file summary, user follow-up query and conversation history.
        2. Use as few or as many criteria as are necessary to fully meet the objectives, with a default limit of 10 criteria unless more are explicitly specified by the user.
        3. Ensure each criterion is clearly named and accompanied by a concise and relevant description.
        4. Avoid unnecessary or overly complex criteria that do not align with the input objectives.

        Your response should provide clear, relevant criteria to guide structured information extraction, considering both the input instructions and the file summary.
      response-format:
        type: text
      system-message: |-
        You are a detail-oriented assistant specializing in defining criteria for extracting structured information.
        Your role is to interpret user-provided instructions and the file summary to generate clear, concise, and relevant criteria that align with the user's objectives.
        Follow these principles:

        1. Understand the Instruction: Analyze the instruction, user follow-up query and user past conversation history thoroughly to identify the key objectives and required information.
        2. Incorporate the File Summary: Use the file summary to provide context and ensure criteria are aligned with the content of the file.
        3. Limit Scope Appropriately:
          - Use only the number of criteria necessary to address the input objectives effectively.
          - By default, limit to 10 criteria, unless the user explicitly specifies more (up to 15 or more).
        4. Ensure Simplicity and Relevance: Keep criteria focused, meaningful, and directly tied to the objectives. Avoid unnecessary complexity or irrelevant suggestions.
        5. Define Data Types: Indicate whether each criterion should be reported as a "string" or an "array of strings."
        6. Clear Naming and Descriptions: Provide each criterion with a clear name and a concise description to ensure usability and understanding.

        Your output should effectively guide users in extracting structured information while adhering to these principles and maintaining alignment with the instruction, user follow-up query and file summary.
      
      temperature: 0
      top-p: 0.95
    condition: ${update-decision.output.results[0].decision} == "deepAnalysis"
  schema-generation:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      n: 1
      prompt: |-
        Generate a structured JSON schema based on the following criteria:
        
        **Criteria**:
        ```
        ${define-criteria.output.texts[0]}
        ```

        **Output Requirements**:
        - Extract property names and descriptions from the criteria.
        - Use the example JSON schema format as a strict guide.
        - For each property:
          1. Use "string", or "array" of type "string" as the data type.
          2. Add a clear and concise description.
        - List all property names in the required array.
        - Set additionalProperties to false to disallow unspecified properties.
        - Ensure the output is not enclosed in a code block (```).

        **Example Format**:
        {
            "name": "output_schema",
            "description": "<insert description>",
            "strict": true,
            "schema": {
                "type": "object",
                "properties": {
                    "<criteria_name_1>": {
                        "type": "string",
                        "description": "<description>"
                    },
                    "<criteria_name_2>": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "<description>"
                    }
                },
                "required": [
                    "<criteria_name_1>",
                    "<criteria_name_2>"
                ],
                "additionalProperties": false
            }
        }
      response-format:
        type: text
      system-message: |-
        You are a highly skilled assistant specializing in generating precise and structured JSON schemas.
        Your goal is to help users create schemas that align with OpenAI's structured output feature.
        Follow the user's instructions carefully and adhere to the following steps when generating the output:

        1. **Interpret the Criteria**: Extract key property names and descriptions from the provided input criteria.
        2. **Apply the Example Format**: Use the specified example JSON schema structure as a template for your output. Ensure consistency in style and organization.
        3. **Define Properties**: Each property must:
          - Have a type of "string" or "array" of "string" (as per the <criteria_name_2> example property in the provided example format).
          - Include a clear and concise description based on the input criteria.
        4. **Set Required Properties**: Include all property names in the required list.
        5. **Restrict Additional Properties**: Set additionalProperties to false to ensure only specified properties are allowed.
        6. **Avoid Code Blocks**: Output the JSON schema directly as plain text without enclosing it in code blocks (e.g., ```).

        Follow these steps sequentially to ensure the generated schema meets the input requirements with high accuracy and clarity.
      temperature: 0
      top-p: 0.95
    condition: ${update-decision.output.results[0].decision} == "deepAnalysis"
  query-reviser:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o-mini
      n: 1
      prompt: |-
        \# Inputs:
        \## **Conversation History** (if any):

        *Please review the conversation history below. If this section is empty, it means below follow-up question is the user's first question (e.g., The user is just greeting a chatbot, so no need for any major changes).*

        ${variable.chat-history}

        \## User's Follow-up Question:

        ${variable.user-query}


        \# Guidelines:

        1. **Review and Understand**: Carefully read the **Conversation History** and the **User's Follow-up Question** to fully comprehend the context and determine the specific information the user seeks.

        2. **Correct Errors**:
        - Fix any typos or grammatical errors in both the conversation history and the user's question.
        - Resolve any incorrect or ambiguous pronouns to ensure clarity.

        3. **Rephrase into Standalone Query**:
        - Rewrite the user's follow-up question into a clear, self-contained query that does not rely on the conversation history.
        - Ensure the rephrased query maintains the original meaning and emphasis of the user's question or intent.
        - Incorporate essential context from the conversation history if it is crucial to understanding the user's intent.

        4. **Ensure Precision**:
        - Make the rephrased query precise and directly related to the user's information need.
        - Optimize the query to effectively retrieve relevant documents or chunks from the Vector Database/RAG system.

        5. **Output Format**:
        - Present the rephrased standalone query plainly and clearly.
        - Do not include any quotation marks, annotations, or additional commentary in your output.
        - **Example Output**:
            [Please just directly output your rephrased standalone query]

        \## Important Notes:

        - **Maintain Original Meaning**: Do not change the original intent or focus of the user's question. Your revisions should enhance clarity and effectiveness without altering the meaning.

        - **Do Not Add Information**: Avoid introducing new information or assumptions that were not present in the user's original question or the conversation history.

        - **Language Consistency**: Ensure that the language and terminology used are consistent and appropriate for the context of the query.

        \### **Final Reminder**:

        Your goal is to produce an accurate and effective standalone query that preserves the user's original intent and is optimized for retrieving relevant results from the Vector Database/RAG system. By enhancing clarity and precision, you will improve the system's ability to provide accurate and helpful information to the user.
      response-format:
        type: text
      system-message: |-
        \# Your Task:

        As an expert in language processing and query formulation, your task is to refine and rephrase the user's follow-up question into a standalone, self-contained query. This rephrased query will be used to search within a Vector Database or Retrieval-Augmented Generation (RAG) system to find relevant documents or chunks.
      temperature: 0
      top-p: 0.95
    condition: ${update-decision.output.results[0].decision} == "rag"
output:
  decision:
    title: Decision
    description: Which retrieval method has been selected.
    value: ${update-decision.output.results[0]}
  extraction-schema:
    title: Extraction Schema
    description: The schema for high-recall data extraction. Only returned if deep analysis method is selected.
    value: ${schema-generation.output.texts[0]}
  rag-query:
    title: RAG Query
    description: The generated query to perform semantic vector search. Only returned if RAG retrieval method is selected.
    value: ${query-reviser.output.texts[0]}
