version: v1beta
variable:
  file-name:
    title: File Name
    description: Name of the file to extract source markdown
    type: string
  file-uid:
    title: File UID
    description: UID of the file to extract source markdown
    type: string
  catalog-name:
    title: Catalog Name
    description: Name of the catalog/KB representing the file (assuming 1 file per KB)
    type: string
  namespace:
    title: Namespace
    description: Namespace where catalog/KB exists
    type: string
  instruction:
    title: Instruction
    description: Specific instruction from executing agent
    type: string
  chat-history:
    title: Chat History
    description: User's chat history
    type: string
  user-query:
    title: User Query
    description: User's follow-up query
    type: string
  file-summary:
    title: File Summary
    description: Summary of the markdown file contents
    type: string
component:
  get-file-in-markdown:
    type: instill-artifact
    task: TASK_GET_FILE_IN_MARKDOWN
    input:
      namespace: ${variable.namespace}
      catalog-id: ${variable.catalog-name}
      file-uid: ${variable.file-uid}
  chunk-text:
    type: text
    task: TASK_CHUNK_TEXT
    input:
      text: ${get-file-in-markdown.output.content}
      strategy:
        setting:
          chunk-size: 70000
          chunk-overlap: 500
          model-name: gpt-4
          chunk-method: Markdown
          code-blocks: true
  define-criteria:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      n: 1
      prompt: |-
        Based on the provided input instructions and file summary, identify or define criteria for extracting structured information from the file contents.

        If the instruction or user follow-up query contains clearly specified criteria, simply use the criteria as is.

        **Instruction:**
        ```
        ${variable.instruction}
        ```

        **File Summary:**
        ```
        ${variable.file-summary}
        ```

        **User Follow-up Query:**
        ```
        ${variable.user-query}
        ```

        **User Past Conversation History:**
        ```
        ${variable.chat-history}
        ```

        **Output requirements**:
        1. The criteria must address the objectives in the instruction and align with the file summary, user follow-up query and conversation history.
        2. Use as few or as many criteria as are necessary to fully meet the objectives, with a default limit of 10 criteria unless more are explicitly specified by the user.
        3. Ensure each criterion is clearly named and accompanied by a concise and relevant description.
        4. Avoid unnecessary or overly complex criteria that do not align with the input objectives.

        Your response should provide clear, relevant criteria to guide structured information extraction, considering both the input instructions and the file summary.
      response-format:
        type: text
      system-message: |-
        You are a detail-oriented assistant specializing in defining criteria for extracting structured information.
        Your role is to interpret user-provided instructions and the file summary to generate clear, concise, and relevant criteria that align with the user's objectives.
        Follow these principles:

        1. Understand the Instruction: Analyze the instruction, user follow-up query and user past conversation history thoroughly to identify the key objectives and required information.
        2. Incorporate the File Summary: Use the file summary to provide context and ensure criteria are aligned with the content of the file.
        3. Limit Scope Appropriately:
          - Use only the number of criteria necessary to address the input objectives effectively.
          - By default, limit to 10 criteria, unless the user explicitly specifies more (up to 15 or more).
        4. Ensure Simplicity and Relevance: Keep criteria focused, meaningful, and directly tied to the objectives. Avoid unnecessary complexity or irrelevant suggestions.
        5. Define Data Types: Indicate whether each criterion should be reported as a "string" or an "array of strings."
        6. Clear Naming and Descriptions: Provide each criterion with a clear name and a concise description to ensure usability and understanding.

        Your output should effectively guide users in extracting structured information while adhering to these principles and maintaining alignment with the instruction, user follow-up query and file summary.
      temperature: 0
      top-p: 0.95
  schema-generation:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      n: 1
      prompt: |-
        Generate a structured JSON schema based on the following criteria:
        
        **Criteria**:
        ```
        ${define-criteria.output.texts[0]}
        ```

        **Output Requirements**:
        - Extract property names and descriptions from the criteria.
        - Use the example JSON schema format as a strict guide.
        - For each property:
          1. Use "string", or "array" of type "string" as the data type.
          2. Add a clear and concise description.
        - List all property names in the required array.
        - Set additionalProperties to false to disallow unspecified properties.
        - Ensure the output is not enclosed in a code block (```).

        **Example Format**:
        {
            "name": "output_schema",
            "description": "<insert description>",
            "strict": true,
            "schema": {
                "type": "object",
                "properties": {
                    "<criteria_name_1>": {
                        "type": "string",
                        "description": "<description>"
                    },
                    "<criteria_name_2>": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "<description>"
                    }
                },
                "required": [
                    "<criteria_name_1>",
                    "<criteria_name_2>"
                ],
                "additionalProperties": false
            }
        }
      response-format:
        type: text
      system-message: |-
        You are a highly skilled assistant specializing in generating precise and structured JSON schemas.
        Your goal is to help users create schemas that align with OpenAI's structured output feature.
        Follow the user's instructions carefully and adhere to the following steps when generating the output:

        1. **Interpret the Criteria**: Extract key property names and descriptions from the provided input criteria.
        2. **Apply the Example Format**: Use the specified example JSON schema structure as a template for your output. Ensure consistency in style and organization.
        3. **Define Properties**: Each property must:
          - Have a type of "string" or "array" of "string" (as per the <criteria_name_2> example property in the provided example format).
          - Include a clear and concise description based on the input criteria.
        4. **Set Required Properties**: Include all property names in the required list.
        5. **Restrict Additional Properties**: Set additionalProperties to false to ensure only specified properties are allowed.
        6. **Avoid Code Blocks**: Output the JSON schema directly as plain text without enclosing it in code blocks (e.g., ```).

        Follow these steps sequentially to ensure the generated schema meets the input requirements with high accuracy and clarity.
      temperature: 0
      top-p: 0.95
  map-chunks:
    type: iterator
    input: ${chunk-text.output.text-chunks}
    component:
      structured-extraction:
        type: openai
        task: TASK_TEXT_GENERATION
        input:
          model: gpt-4o-mini
          n: 1
          prompt: |-
            Extract all relevant information based on the provided context according to the specified schema.
            Focus on maximizing recall by capturing all potentially relevant details without omitting any information.

            **Context**:
            ```
            ${map-chunks.element}
            ```
          response-format:
            json-schema:
              ${schema-generation.output.texts[0]}
            type: json_schema
          system-message: |-
            You are a meticulous and highly capable assistant specialized in extracting information with a focus on high recall.
            Your task is to identify and extract all potentially relevant details from the given context while adhering to the provided JSON schema.
          temperature: 0
          top-p: 0.95
    output-elements:
      result: ${structured-extraction.output.texts[0]}
  reduce:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o-mini
      n: 1
      prompt: |-
        Aggregate all extracted information from each chunk into a single JSON object.
        
        **Extracted Information**:
        ```
        ${map-chunks.output.result}
        ```
        **Output Requirements**:
        1. Do not add any content that is not provided in the extracted information.
        2. Do not omit any content that is provided in the extracted information.
        3. If the same information is duplicated, simply extract and output the information once and discard the duplication.
      response-format:
        json-schema:
          ${schema-generation.output.texts[0]}
        type: json_schema
      system-message: You are a helpful assistant.
      temperature: 0
      top-p: 0.95
    condition: ${chunk-text.output.chunk-num} > 1
  single-to-json:
    type: json
    task: TASK_UNMARSHAL
    input:
      string: ${map-chunks.output.result[0]}
    condition: ${chunk-text.output.chunk-num} == 1
  reduced-to-json:
    type: json
    task: TASK_UNMARSHAL
    input:
      string: ${reduce.output.texts[0]}
    condition: ${chunk-text.output.chunk-num} > 1
output:
  single:
    title: Single Chunk Output
    value: ${single-to-json.output.json}
  multiple:
    title: Multiple Chunk Output
    value: ${reduced-to-json.output.json}
  citation:
    title: Citation
    value: ${variable.file-name}